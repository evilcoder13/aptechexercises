//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatApp.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextMessage", Namespace="http://schemas.datacontract.org/2004/07/Nov04thEAPChat")]
    [System.SerializableAttribute()]
    public partial class TextMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SentTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ChatApp.ServiceReference1.User UsrField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SentTime {
            get {
                return this.SentTimeField;
            }
            set {
                if ((this.SentTimeField.Equals(value) != true)) {
                    this.SentTimeField = value;
                    this.RaisePropertyChanged("SentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ChatApp.ServiceReference1.User Usr {
            get {
                return this.UsrField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrField, value) != true)) {
                    this.UsrField = value;
                    this.RaisePropertyChanged("Usr");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Nov04thEAPChat")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAll", ReplyAction="http://tempuri.org/IService1/GetAllResponse")]
        System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAll", ReplyAction="http://tempuri.org/IService1/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAfterId", ReplyAction="http://tempuri.org/IService1/GetAfterIdResponse")]
        System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAfterId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAfterId", ReplyAction="http://tempuri.org/IService1/GetAfterIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAfterIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAfterTime", ReplyAction="http://tempuri.org/IService1/GetAfterTimeResponse")]
        System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAfterTime(System.DateTime t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAfterTime", ReplyAction="http://tempuri.org/IService1/GetAfterTimeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAfterTimeAsync(System.DateTime t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertMessage", ReplyAction="http://tempuri.org/IService1/InsertMessageResponse")]
        void InsertMessage(ChatApp.ServiceReference1.TextMessage tm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertMessage", ReplyAction="http://tempuri.org/IService1/InsertMessageResponse")]
        System.Threading.Tasks.Task InsertMessageAsync(ChatApp.ServiceReference1.TextMessage tm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        string Login(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        void Register(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string user, string pass);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ChatApp.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ChatApp.ServiceReference1.IService1>, ChatApp.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAfterId(int id) {
            return base.Channel.GetAfterId(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAfterIdAsync(int id) {
            return base.Channel.GetAfterIdAsync(id);
        }
        
        public System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage> GetAfterTime(System.DateTime t) {
            return base.Channel.GetAfterTime(t);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ChatApp.ServiceReference1.TextMessage>> GetAfterTimeAsync(System.DateTime t) {
            return base.Channel.GetAfterTimeAsync(t);
        }
        
        public void InsertMessage(ChatApp.ServiceReference1.TextMessage tm) {
            base.Channel.InsertMessage(tm);
        }
        
        public System.Threading.Tasks.Task InsertMessageAsync(ChatApp.ServiceReference1.TextMessage tm) {
            return base.Channel.InsertMessageAsync(tm);
        }
        
        public string Login(string user, string pass) {
            return base.Channel.Login(user, pass);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string user, string pass) {
            return base.Channel.LoginAsync(user, pass);
        }
        
        public void Register(string user, string pass) {
            base.Channel.Register(user, pass);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string user, string pass) {
            return base.Channel.RegisterAsync(user, pass);
        }
    }
}
