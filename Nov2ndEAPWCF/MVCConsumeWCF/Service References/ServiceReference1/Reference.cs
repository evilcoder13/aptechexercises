//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCConsumeWCF.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskGroup", Namespace="http://schemas.datacontract.org/2004/07/Nov2ndEAPWCF")]
    [System.SerializableAttribute()]
    public partial class TaskGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskCls", Namespace="http://schemas.datacontract.org/2004/07/Nov2ndEAPWCF")]
    [System.SerializableAttribute()]
    public partial class TaskCls : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MVCConsumeWCF.ServiceReference1.TaskGroup TGField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MVCConsumeWCF.ServiceReference1.TaskGroup TG {
            get {
                return this.TGField;
            }
            set {
                if ((object.ReferenceEquals(this.TGField, value) != true)) {
                    this.TGField = value;
                    this.RaisePropertyChanged("TG");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LayDuLieuTaskGroup", ReplyAction="http://tempuri.org/IService1/LayDuLieuTaskGroupResponse")]
        System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskGroup> LayDuLieuTaskGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LayDuLieuTaskGroup", ReplyAction="http://tempuri.org/IService1/LayDuLieuTaskGroupResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskGroup>> LayDuLieuTaskGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LayDuLieuTaskCls", ReplyAction="http://tempuri.org/IService1/LayDuLieuTaskClsResponse")]
        System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls> LayDuLieuTaskCls();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LayDuLieuTaskCls", ReplyAction="http://tempuri.org/IService1/LayDuLieuTaskClsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls>> LayDuLieuTaskClsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TimKiemTaskCls", ReplyAction="http://tempuri.org/IService1/TimKiemTaskClsResponse")]
        System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls> TimKiemTaskCls(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TimKiemTaskCls", ReplyAction="http://tempuri.org/IService1/TimKiemTaskClsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls>> TimKiemTaskClsAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTaskCls", ReplyAction="http://tempuri.org/IService1/InsertTaskClsResponse")]
        void InsertTaskCls(MVCConsumeWCF.ServiceReference1.TaskCls tc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTaskCls", ReplyAction="http://tempuri.org/IService1/InsertTaskClsResponse")]
        System.Threading.Tasks.Task InsertTaskClsAsync(MVCConsumeWCF.ServiceReference1.TaskCls tc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVCConsumeWCF.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVCConsumeWCF.ServiceReference1.IService1>, MVCConsumeWCF.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskGroup> LayDuLieuTaskGroup() {
            return base.Channel.LayDuLieuTaskGroup();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskGroup>> LayDuLieuTaskGroupAsync() {
            return base.Channel.LayDuLieuTaskGroupAsync();
        }
        
        public System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls> LayDuLieuTaskCls() {
            return base.Channel.LayDuLieuTaskCls();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls>> LayDuLieuTaskClsAsync() {
            return base.Channel.LayDuLieuTaskClsAsync();
        }
        
        public System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls> TimKiemTaskCls(string search) {
            return base.Channel.TimKiemTaskCls(search);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MVCConsumeWCF.ServiceReference1.TaskCls>> TimKiemTaskClsAsync(string search) {
            return base.Channel.TimKiemTaskClsAsync(search);
        }
        
        public void InsertTaskCls(MVCConsumeWCF.ServiceReference1.TaskCls tc) {
            base.Channel.InsertTaskCls(tc);
        }
        
        public System.Threading.Tasks.Task InsertTaskClsAsync(MVCConsumeWCF.ServiceReference1.TaskCls tc) {
            return base.Channel.InsertTaskClsAsync(tc);
        }
    }
}
